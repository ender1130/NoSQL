
MongoDB

MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。

MongoDB支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。

Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单
表查询的绝大部分功能，而且还支持对数据建立索引。

特点是高性能、易部署、易使用，存储数据非常方便。

MongoDB的适用场合: 针对关系不是很紧密并且数据量较大的数据，例如股票数据。

MongoDB由数据库(database)、集合(collection)、文档对象(document)三个层次组成。

MongoDB存储的数据格式是key-value对的集合，键是字符串，值可以是数据类型集合里的任意类型，包括数组和文档对象。
这种数据格式称作 BSON，即 "Binary Serialized Document Notation"，是一种类似JSON的二进制序列化文档。
BSON有以下三个特点: 1.轻量级、2.跨平台、3.效率高。

功能特性:
a.面向集合存储，易存储对象类型的数据。
b.支持动态查询。
c.支持完全索引，包含内部对象。
d.支持同步并且高可用。
e.文件存储格式为BSON（一种JSON的扩展）。

存储在集合中的文档，被存储为键-值对的形式。键用于唯一标识一个文档，为字符串类型，而值则可以是各种复杂的文件类型。
我们称这种存储形式为BSON（Binary Serialized Document Format）。

-------------------------------------------------------------------------------------------------------------

--显示所有数据库
show dbs;

--列出当前数据库的所有文档
show collections;

--查看各collection的状态
db.printCollectionStats();

--显示当前数据库
db;

--显示当前数据库的所有用户
show users;
或 db.system.users.find();

--添加用户
db.addUser("bsoft","bsoft");

注:
db.addUser("username", "password"); --普通权限，可读写
db.addUser("username", "password", true); --只可读，不可写

--删除用户
db.system.users.remove({user:"aaa"});
或 db.removeUser('aaa');

--使用数据库cdr
use cdr;
(注:即使这个数据库不存在也可以执行，但该数据库不会立刻被新建，
要等到执行了insert之类的操作时，才会建立这个数据库)

--删除当前数据库
db.dropDatabase();

--新建数据集合
db.createCollection("t_test1");

--删除数据集合(表)
db.t_test1.drop();

(注:MongoDB没有新建数据库或者collection的命令，只要进行insert或其它操作，
MongoDB就会自动帮你建立数据库和collection。)

--插入数据(注:save、insert是添加记录的关键字，add不是)
第一种:
> t={name:'aaa1',age:22};
> db.t_test1.save(t);
> t={name:'aaa2',address:'beijing'};
> db.t_test1.save(t);

第二种:
> db.t_test1.insert({name:'aaa3',age:21,address:'hangzhou'});

第三种:
> t={name:'aaa4',age:25};
> db.t_test1.insert(t);

第四种:
> db.t_test1.save({name:'aaa5',age:30});

--添加一个学生，生日为1990年12月18日( 注:月份要减1，天数要加1 )
> db.coll_1.save({name:'tom',birthday:new Date(1990,11,19)});

--查询数据
db.t_test1.find();                                      // select * from t_test1
db.t_test1.find().limit(10);                            // select * from t_test1 limit 10
db.t_test1.find().sort({age:1}); 			// select * from t_test1 order by age asc
db.t_test1.find().sort({age:-1}); 			// select * from t_test1 order by age desc
db.t_test1.find().sort({age:1}).skip(5).limit(10); 	// select * from t_test1 order by age asc limit 5,10
db.t_test1.find({age:10});				// select * from t_test1 where age = 10
db.t_test1.find({age: {$lt:10}}); 			// select * from t_test1 where age < 10
db.t_test1.find({age: {$gt:25}});			// select * from t_test1 where age > 10
db.t_test1.find({}, {name:true}); 			// select name from t_test1

--比较操作符
$gt : > 
$lt : < 
$gte: >= 
$lte: <= 
$ne : !=、<> 
$in : in 
$nin: not in 
$all: all 
$not: 反匹配(1.3.3及以上版本) 

--循环显示所有
> var cursor = db.coll_1.find();
> while(cursor.hasNext()) printjson(cursor.next());
或
> db.coll_1.find().forEach(printjson);

--条件查询
> db.coll_1.find({name:'lisi'});
> db.coll_1.find({name:'lisi',sex:'man'});

--查询一条记录
> db.coll_1.findOne({sex:'man'});
> db.coll_1.find({sex:'man'}).limit(1);

--查找并排序(name升序,age降序)
> db.coll_1.find({sex:'man'}).limit(1);

--查询名字不等于 'lili' 的学生信息
> db.coll_1.find({name:{$ne:'lili'}});

--查询 birthday > '1990-12-17' and birthday <= '1990-12-19' 的学生 
> db.coll_1.find({birthday:{$gt:new Date(1990,11,18),$lte:new Date(1990,11,20)}}); 

--查询 age in (22,23) 的数据 
> db.coll_1.find({age:{$in:[22,23]}});

--查询 age取模10等于2 的数据 
> db.coll_1.find('this.age % 10 == 2'); 
或 
> db.coll_1.find({age:{$mod:[10,2]}});

--查询 age不等于22 的数据
> db.coll_1.find({age:{$ne:22}});

--查询 age取模10不等于0 的数据 
> db.coll_1.find({age:{$not:{$mod:[10,0]}}});
或
> db.coll_1.find({age:{$ne:{$mod:[10,0]}}});

--返回该列消去重复后的所有的值
> db.coll_1.distinct('age');

--返回部分字段,选择返回age和_id字段(_id字段总是会被返回),0为false,非0为true 
> db.coll_1.find({},{age:1});
> db.coll_1.find({},{age:2});
> db.coll_1.find({},{age:true}); 
> db.coll_1.find({},{age:-1});

--排除返回age字段 
> db.coll_1.find({},{age:0});
> db.coll_1.find({},{age:false});

--查询所有存在age字段的记录 
> db.coll_1.find({age:{$exists:true}});
 
--查询所有不存在age字段的记录 
> db.coll_1.find({age:{$exists:false}});

--查看collection数据的大小
> db.coll_1.dataSize();

--查看colleciont状态
> db.coll_1.stats();

--更新数据,第一个参数是查询对象,第二个是替代的,可以在第二个对象里指定更新哪些字段，要使用$set
db.t_test1.update({name:"bbb1"},{$set:{addr:"shanghai"}});

--根据条件删除数据
db.t_test1.remove({name:'bbb4'});

--清空表
db.t_test2.remove();

--统计数据
db.t_test1.count();

--创建索引
db.t_test1.ensureIndex({age:1}); 		   // 在age上建立普通索引
db.t_test1.ensureIndex({name:1,age:1}); 	   // 多字段索引，组合索引
db.t_test1.ensureIndex({name:1},{unique:true});    // 唯一索引

--查询所有索引的大小
> db.coll_1.totalIndexSize();

--游标
for( var c = db.coll_1.find(); c.hasNext(); ) {
   print( c.next());
}
或
> db.coll_1.find().forEach( function(o) { print('student:' + o.name); } );

--备份
C:\mongodb\bin>mongodump --help

--恢复
C:\mongodb\bin>mongorestore --help

--导出
C:\mongodb\bin>mongoexport --help

C:\mongodb\bin>mongoexport -d cdr -c t_test1 -o c:\t_test1.json

--导入
C:\mongodb\bin>mongoimport --help

mongoimport -d test -c t_test1 --file c:\t_test1.json
